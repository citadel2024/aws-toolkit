// Code generated by MockGen. DO NOT EDIT.
// Source: cloudwatchx/interface.go
//
// Generated by this command:
//
//	mockgen -source cloudwatchx/interface.go -destination cloudwatchx/mock_interface.go -package cloudwatchx
//

// Package cloudwatchx is a generated GoMock package.
package cloudwatchx

import (
	context "context"
	reflect "reflect"

	cloudwatch "github.com/aws/aws-sdk-go-v2/service/cloudwatch"
	gomock "go.uber.org/mock/gomock"
)

// MockCloudwatchPutMetricDataAPI is a mock of CloudwatchPutMetricDataAPI interface.
type MockCloudwatchPutMetricDataAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCloudwatchPutMetricDataAPIMockRecorder
	isgomock struct{}
}

// MockCloudwatchPutMetricDataAPIMockRecorder is the mock recorder for MockCloudwatchPutMetricDataAPI.
type MockCloudwatchPutMetricDataAPIMockRecorder struct {
	mock *MockCloudwatchPutMetricDataAPI
}

// NewMockCloudwatchPutMetricDataAPI creates a new mock instance.
func NewMockCloudwatchPutMetricDataAPI(ctrl *gomock.Controller) *MockCloudwatchPutMetricDataAPI {
	mock := &MockCloudwatchPutMetricDataAPI{ctrl: ctrl}
	mock.recorder = &MockCloudwatchPutMetricDataAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudwatchPutMetricDataAPI) EXPECT() *MockCloudwatchPutMetricDataAPIMockRecorder {
	return m.recorder
}

// PutMetricData mocks base method.
func (m *MockCloudwatchPutMetricDataAPI) PutMetricData(ctx context.Context, params *cloudwatch.PutMetricDataInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.PutMetricDataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutMetricData", varargs...)
	ret0, _ := ret[0].(*cloudwatch.PutMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMetricData indicates an expected call of PutMetricData.
func (mr *MockCloudwatchPutMetricDataAPIMockRecorder) PutMetricData(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMetricData", reflect.TypeOf((*MockCloudwatchPutMetricDataAPI)(nil).PutMetricData), varargs...)
}
